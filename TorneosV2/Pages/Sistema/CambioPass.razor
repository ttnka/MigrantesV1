@page "/cambiopass"
@page "/cambiopass/{code}/{userId}/{t}"
@inject NotificationService NS
@inherits CambioPassBase


<RadzenTemplateForm @ref="PassForm" Data="@PassData" Submit="@((PassClase arg) => { PassFInicio(arg); })">
    <RadzenFieldset Text="Indentificate" Style="width:80%">
        <div class="container-fluid" style="background: lightgray;">

            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Mail" />
                </div>
                <div class="col-md-8">
                    <RadzenLabel>@PassData.Email</RadzenLabel>
                </div>
            </div>

            <div class="row" style="background:gray">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Nuevo Password" />
                </div>
                <div class="col-md-8">

                    <RadzenTextBox style="width: 90%;" Name="Pass" @bind-Value="PassData.Pass"
                                   Placeholder="Nuevo password" MaxLength="75" Change="CheckPass" />
                    <RadzenRequiredValidator Component="Pass" Text="Password es requerido" />

                </div>
            </div>

            <div class="row">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Repetir Password" />
                </div>
                <div class="col-md-8">

                    <RadzenTextBox style="width: 90%;" Name="Confirm" @bind-Value="PassData.Confirm"
                                   Placeholder="Repite el password" MaxLength="75" Change="CheckPass" />
                    <RadzenRequiredValidator Component="Confirm" Text="Repetir el password es requerido" />

                </div>
            </div>

            <div class="row" style="background:gray">
                <div class="col-md-4 align-items-center d-flex">
                </div>
                <div class="col-md-8">
                    @if (Msn == "Ok")
                    {
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                      Class="m-1" ButtonType="ButtonType.Submit" Disabled="BotonNuevo">
                            Cambiar
                        </RadzenButton>
                    }

                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="Cancelar" />


                </div>
            </div>
        </div>
    </RadzenFieldset>
</RadzenTemplateForm>

@code {

    private bool BotonNuevo = false;

    public async Task PassFInicio(PassClase data)
    {

        ShowNotification(ElMsn("Info",
            "Estamos trabajando", "Dame un minuto, Estamos actualizando tu Password!", 0));
        await PassF(data);
    }


    void CheckPass()
    {
        
        Msn = "";
        if (PassData.Pass.Length < 6 || PassData.Confirm.Length < 6) return;


        string[] Prohibido = { "password", "contraseña", "123", "aaa", "dios" };
        bool IsMin = false;
        bool IsMay = false;
        bool IsNum = false;
        bool HasRep = false;

        foreach (char c in PassData.Pass)
        {
            IsMin = char.IsLower(c) ? true : IsMin;
            IsMay = char.IsUpper(c) ? true : IsMay;
            IsNum = char.IsNumber(c) ? true : IsNum;
            HasRep = PassData.Pass.Count(x => x == c) > 2 ? true : HasRep;
        }

        Msn = !IsMin ? "El Password requiere almenos una minuscula!" : Msn;
        Msn = !IsMay ? "El Password requiere almenos una mayuscula!" : Msn;
        Msn = !IsNum ? "El Password requiere almenos un numero!" : Msn;
        Msn = HasRep ? "El Password no puede tener caracteres repetidos, 3 veces!" : Msn;
        Msn = Prohibido.Contains(PassData.Pass.ToLower()) ? "El Password no es una palabra aceptable" : Msn;
        Msn = Msn == "" ? "Ok" : Msn;
    }
    void Cancelar()
    {
        PassData = new();
    }
    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }
}

