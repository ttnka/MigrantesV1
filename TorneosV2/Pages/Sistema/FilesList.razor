@inherits FilesListBase
@inject NotificationService NS
@using TorneosV2.Modelos
@using static TorneosV2.Modelos.MyFunc;


@if (LosDatos != null)
{
    <RadzenDataGrid @ref="FilesGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosDatos" TItem="Z170_Files"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Success" Click="Leer">
                Actualizar
            </RadzenButton>

        </HeaderTemplate>

        <Columns>

            <RadzenDataGridColumn TItem="Z170_Files" Filterable="false" Property="Fecha"
                                  Title="Fecha" Frozen="true" Width="90px" TextAlign="TextAlign.Left">
                <Template Context="datos">
                    <label>@($"{@MyFunc.FormatoFecha("DD/MMM/AA", datos.Fecha)}")</label>
                    <br />
                    <label>@($"{@MyFunc.LaHora(datos.Fecha, "S")}")</label>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z170_Files" Title="Titulo" Property="Titulo"
                                  Filterable="true" Width="200px">
                <Template Context="datos">

                    <RadzenLabel>
                        @datos.Titulo
                    </RadzenLabel>

                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox style="width: 90%;" Name="Titulo" @bind-Value="datos.Titulo"
                                   MaxLength="75" /><br />
                    <RadzenLengthValidator Component="Paterno" Min="1" Max="75" Text="Un Titulo REQUERIDO!"
                                           Style="position: absolute" />

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z170_Files" Title="Archivo" Property="Archivo"
                                  Filterable="true" Width="200px">
                <Template Context="datos">

                    <RadzenLabel>
                        @datos.Archivo
                    </RadzenLabel>

                </Template>
                
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z170_Files" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="200px" Title="Estado">
                <Template Context="datos">
                    @if (ElUser.Nivel > 5 || datos.Estado < 2)

                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado > 0 && datos.Estado < 2 && ElUser.Nivel > 4)
                    {
                        <RadzenLabel>
                            Borrar este registro?
                        </RadzenLabel><br />
                        <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                         Placeholder="Borrar este registro?">
                            <Items>
                                <RadzenSelectBarItem Text="No" Value="true" />
                                <RadzenSelectBarItem Text="Si" Value="false" />
                            </Items>
                        </RadzenSelectBar><br />

                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">

    </div>
}



@code {
    Z170_Files ArchivoToInsert = new("", "", "","", 3, false);

    void Cancelar()
    {
        ArchivoToInsert = new("", "", "", "", 3, false);
    }

    async Task EditRow(Z170_Files archivo)
    {
        await FilesGrid!.EditRow(archivo);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z170_Files archivo)
    {
        if (archivo == ArchivoToInsert) ArchivoToInsert = null!;

        Editando = !Editando;
        ApiRespuesta<Z170_Files> resultado = await Servicio(ServiciosTipos.Update, archivo);

        string txt = $"Archivo: {archivo.Archivo} Tipo: {archivo.Tipo}";
        txt += $"Fecha: {archivo.Fecha}";
        txt += archivo.Status ? "Estatus: Activo" : "Estatus: Suspendido";
        if (resultado.Exito)
        {
            ShowNotification(ElMsn("info", "Actualizo",
                $"Se actualizo la info del archivo {archivo.Titulo}", 0));

            txt = $"{TBita}, Se actualizo la info de archivo " + txt;
            Z190_Bitacora bitaTemp = new(ElUser.UserId, txt, ElUser.OrgId);
            BitacoraMas(bitaTemp);
            await BitacoraWrite();
        }
        else
        {
            string etxt = $"Error No Se actualizo la info del archivo de {archivo.Titulo}";
            foreach (var e in resultado.MsnError)
            { etxt += $", {e}"; }

            ShowNotification(ElMsn("Error", "Error", etxt, 4000));
            txt = $"{TBita}, No se actualizo un registro de Archivo" + txt + ", ";
            txt += etxt;
            Z192_Logs logTemp = new(ElUser.UserId, txt, false);
            await LogAll(logTemp);
            await FilesGrid!.Reload();
        }

    }

    async Task SaveRow(Z170_Files archivo)
    {
        await FilesGrid!.UpdateRow(archivo);
    }

    void CancelEdit(Z170_Files archivo)
    {
        if (archivo == ArchivoToInsert) ArchivoToInsert = null!;

        Editando = !Editando;
        FilesGrid!.CancelEditRow(archivo);
    }

    async Task InsertRow()
    {
        /*
        ArchivoToInsert = new(
            "", "", "", "", 3, false 
            );
        
        Editando = !Editando;
        await FilesGrid!.InsertRow(ArchivoToInsert);
        */
    }

    async void OnCreateRow(Z170_Files archivo)
    {
        if (archivo == ArchivoToInsert) ArchivoToInsert = null!;

        Editando = !Editando;
        ApiRespuesta<Z170_Files> resultado = await Servicio(ServiciosTipos.Insert, archivo);

        string txt = $"Archivo: {archivo.Archivo} Tipo: {archivo.Tipo}";
        txt += $"Fecha: {archivo.Fecha}";
        txt += archivo.Status ? "Estatus: Activo" : "Estatus: Suspendido";

        if (resultado.Exito)
        {
            ShowNotification(ElMsn("Exito", "Nuevo requerimiento de archivo",
                $"Se creo un nuevo registro de archivo {archivo.Titulo}", 0));

            txt = $"{TBita}, Se agrego la info de archivo " + txt;
            Z190_Bitacora bitaT = new(ElUser.UserId, $"{TBita}, {txt}", ElUser.OrgId);
            BitacoraMas(bitaT);
            await BitacoraWrite();
        }
        else
        {
            string etxt = $"Error NO se creo el nuevo registro de campo requerido {archivo.Titulo}    ";
            foreach (var e in resultado.MsnError)
            { etxt += $", {e}"; }

            ShowNotification(ElMsn("Error", "Error", etxt, 0));
            txt = $"{TBita}, No se creo un nuevo requerimiento de CAMPO " + txt + ", ";
            txt += etxt;
            Z192_Logs logTemp = new(ElUser.UserId, txt, true);
            await LogAll(logTemp);
            await FilesGrid!.Reload();

        }
    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }

}

