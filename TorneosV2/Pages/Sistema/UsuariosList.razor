@inherits UsuariosListBase
@inject NotificationService NS
@using TorneosV2.Modelos
@using static TorneosV2.Modelos.MyFunc;

@if (AddFormShow && !SoloLista)
{
    <NuevoUsuario EsNuevoUser="true" SoloLista="false" />
}

@if (LosUsers.Any())
{
    <RadzenDataGrid @ref="UsersGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosUsers" TItem="Z110_User"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 4)
            {
                <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Success" Click="ShowAddForm">
                    @BtnNewText
                </RadzenButton>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Info" Click="DetReadallUsers">
                Actualizar
            </RadzenButton>
        </HeaderTemplate>

        <Template Context="datos1">
            <CascadingValue Value="LasOrgs" Name="LasOrgsAll">
                <RadzenTabs>
                    <Tabs>
                        <RadzenTabsItem Text="Libre">
                                        
                        </RadzenTabsItem>

                        <RadzenTabsItem Text="Libre">

                        </RadzenTabsItem>

                    </Tabs>
                </RadzenTabs>
            </CascadingValue>
        </Template>
        <!-- AQUI EMPIEZA REPORTE-->

        <Columns>
            <RadzenDataGridColumn TItem="Z110_User" Title="Id"
                                  Filterable="false" Width="50px">
                <Template Context="datos">
                    @(LosUsers.IndexOf(datos) + 1)
                </Template>
            </RadzenDataGridColumn>

            @if(!SoloLista)
            {

            }

            <RadzenDataGridColumn TItem="Z110_User" Title="Nombre completo"
                                  Filterable="true" Width="250px">
                <Template Context="datos">
                    <div style="white-space:pre-wrap">@datos.Completo</div>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Nombre" @bind-Value="datos.Nombre" Style="width: 90%" Placeholder="Nombre" /><br>
                    <RadzenRequiredValidator Component="Nombre" Text="El Nombre es Obligatorio." />
                    <RadzenTextBox Name="Paterno" @bind-Value="datos.Paterno" Style="width: 90%" Placeholder="Apellido Paterno" /><br>
                    <RadzenRequiredValidator Component="Nombre" Text="El apellido paterno es Obligatorio." />
                    <RadzenTextBox Name="Materno" @bind-Value="datos.Materno" Style="width: 90%" Placeholder="Apellido Materno" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z110_User" Title="Email"
                                  Filterable="true" Resizable="true" Width="200px">

                <Template Context="datos">
                    <RadzenLabel style="white-space:pre-wrap; line-height: initial">
                        @datos.OldEmail
                    </RadzenLabel>
                </Template>

            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z110_User" Title="Nivel"
                                  Filterable="true" Resizable="true" Width="180px">
                <Template Context="datos">
                    @if(Niveles.Exists(x => x.Key == (datos.Nivel)))
                        {
                            <RadzenLabel>@($"{Niveles.FirstOrDefault(x => x.Key == datos.Nivel).Value}")</RadzenLabel> 
                        }
                        else
                        {
                        <RadzenLabel>No hay valor del nivel!</RadzenLabel>
                    }
                </Template>

                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Nivel" Data=Niveles @bind-Value=@datos.Nivel
                                    ValueProperty="Key" TextProperty="Value" AllowClear="true"
                                    Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="Z110_User" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">
                    @if (ElUser.Nivel < 6 && !datos.Status ||
                            (datos.OldEmail == Constantes.SyMail || datos.OldEmail == Constantes.DeMailPublico))
                    {
                        <label></label>
                    }
                    else
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                      Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    }
                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado != 3)
                    {
                        <div style="white-space:pre-wrap">
                            Borrar este registro?
                            <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                             Placeholder="Borrar este registro?">
                                <Items>
                                    <RadzenSelectBarItem Text="No" Value="true" />
                                    <RadzenSelectBarItem Text="Si" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />


                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">
        user
    </div>
}


@code {
    void ShowAddForm()
    {

        if (AddFormShow)
        {
            AddFormShow = false;
            BtnNewText = "Nuevo Usuario";
        }
        else
        {
            AddFormShow = true;
            BtnNewText = "Ocultar formulario";
        };
    }

    void Cancelar()
    {
        //OrgNew = new();
        UserToInsert = new("","", "", "", 0, "", "", 3, true);
    }

    Z110_User UserToInsert = new("","", "", "", 0, "", "", 3, false);

    async Task EditRow(Z110_User user)
    {
        await UsersGrid!.EditRow(user);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z110_User user)
    {
        try
        {
            if (user == UserToInsert) UserToInsert = null!;

            Editando = !Editando;
            ApiRespuesta<Z110_User> resultado = await Update(user);

            string txt = $"Organizacion: {user.Org.Comercial}, Nivel: ";
            txt += Niveles.FirstOrDefault(x => x.Key == user.Nivel);
            txt += $"Email: {user.OldEmail}";
            txt += user.Status ? "Estatus: Activo" : "Estatus: Suspendido";
            if (resultado.Exito)
            {
                ShowNotification(ElMsn("info", "Actualizo",
                    $"Se actualizo la info del usuario {user.Completo}", 0));
                txt = $"{TBita}, Se actualizo la info del usuario {user.Completo}";
                Z190_Bitacora bitaT = new(ElUser.UserId, txt, ElUser.OrgId);
                BitacoraMas(bitaT);
                await BitacoraWrite();
            }
            else
            {
                string etxt = $"Error No Se actualizo la info del usuario {user.Completo}";
                foreach (var e in resultado.MsnError)
                { etxt += $", {e}"; }

                ShowNotification(ElMsn("Error", "Error", etxt, 4000));
                txt = $"{TBita}, No se actualizo un registro de usuario " + txt + ", ";
                txt += etxt;
                Z192_Logs logTemp = new(ElUser.UserId, txt, false);
                await LogAll(logTemp);
                
            }
            await UsersGrid!.Reload();
        }
        catch (Exception ex)
        {
            Z192_Logs logT = new(ElUser.UserId, $"Error al intentar leer los usuarios {TBita} {ex}", false);
            await LogAll(logT);
        }

    }

    async Task SaveRow(Z110_User user)
    {
        await UsersGrid!.UpdateRow(user);
    }

    void CancelEdit(Z110_User user)
    {
        if (user == UserToInsert) UserToInsert = null!;

        Editando = !Editando;
        UsersGrid!.CancelEditRow(user);
    }

    async Task InsertRow()
    {
        /*
        UserToInsert = new(
            "", "", "", "", 3, false
            );

        Editando = !Editando;
        await OrgsGrid!.InsertRow(UserToInsert);
        */
    }

    async void OnCreateRow(Z110_User user)
    {


    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }
}