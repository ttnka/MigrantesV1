
@inherits ParienteListBase
@inject NotificationService NS
@using TorneosV2.Modelos
@using static TorneosV2.Modelos.MyFunc;

@if (LosParientes != null)
{
    <RadzenDataGrid @ref="ParientesGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosParientes" TItem="Z309_Pariente"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 3)
            {
                <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Success" Click="InsertRow">
                    Agrega dato
                </RadzenButton>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Info" Click="LeerParientes">
                Actualizar
            </RadzenButton>
            <RadzenLabel>@ElNombre.Completo</RadzenLabel>
            @if (ElNombre.Apodo != null)
            {<RadzenLabel>@ElNombre.Apodo</RadzenLabel>}
        </HeaderTemplate>

        <!-- AQUI EMPIEZA REPORTE-->

        <Columns>
            <RadzenDataGridColumn TItem="Z309_Pariente" Title="Id"
                                  Filterable="false" Width="50px">
                <Template Context="datos">
                    @(LosParientes.IndexOf(datos) + 1)
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z309_Pariente" Title="Pariente" Filterable="true"
                                  Width="150px" Property="Tipo">
                <Template Context="datos">
                    @if(LosNombresAll.Any(x=>x.NombreId == datos.ParienteId))
                        {
                            <RadzenLabel>
                                @LosNombresAll.FirstOrDefault(x => x.NombreId == datos.ParienteId)!.PMN
                            </RadzenLabel>

                        }
                        else
                        {
                            <RadzenLabel>Sin datos!</RadzenLabel>
                        }
                </Template>
                <EditTemplate Context="datos">
                    <RadzenDropDown Name="ParienteId" Data=LosActivos @bind-Value=@datos.ParienteId
                                    ValueProperty="NombreId" TextProperty="PMN" AllowClear="false"
                                    Style="width: 90%;" />

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z309_Pariente" Title="Parentesco" Filterable="true"
                                  Width="150px" Property="Parentesco">
                <Template Context="datos">
                    @if (Parentescos.Any(x => x.Key == datos.Parentesco))
                    {
                        <RadzenLabel>
                            @Parentescos.FirstOrDefault(x => x.Key == datos.Parentesco).Value
                        </RadzenLabel>
                    }
                        else
                    {   
                        <RadzenLabel>No hay datos!</RadzenLabel>

                    }
                </Template>
                <EditTemplate Context="datos">
                    <RadzenDropDown Name="Parientesco" Data=Parentescos @bind-Value=@datos.Parentesco
                                    ValueProperty="Key" TextProperty="Value" AllowClear="false"
                                    Style="width: 90%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z309_Pariente" Title="Observaciones" Property="Observaciones"
                                  Filterable="true" Width="150px">
                <Template Context="datos">
                    <RadzenLabel> @datos.Observacion</RadzenLabel>

                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextArea Name="Observacion" @bind-Value="datos.Observacion" Placeholder="Comentarios"
                                    Style="width: 100%" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z309_Pariente" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">

                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                  Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado != 3)
                    {
                        <div style="white-space:pre-wrap">
                            Borrar este registro?
                            <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                             Placeholder="Borrar este registro?">
                                <Items>
                                    <RadzenSelectBarItem Text="No" Value="true" />
                                    <RadzenSelectBarItem Text="Si" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />

                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">
        Contacto
    </div>
}


@code {
    Z309_Pariente pariToInsert = new() { Estado = 3 };

    async Task EditRow(Z309_Pariente pari)
    {
        await ParientesGrid!.EditRow(pari);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z309_Pariente pari)
    {
        if (pari == pariToInsert) pariToInsert = null!;

        ShowNotification(ElMsn("Info", "Estamos trabajando!", "Dame un minuto para realizar estos cambios!", 0));
        Editando = !Editando;
        ApiRespuesta<Z309_Pariente> resultado = await Servicio(ServiciosTipos.Update, pari);

        string txt = $"Nombre: {ElNombre.Completo} con ";

        txt += LosNombresAll.Any(x => x.NombreId == pari.NombreId) ?
                LosNombresAll.FirstOrDefault( z => z.NombreId == pari.ParienteId)!.Completo : " ";

        txt += $"Observaciones: {pari.Observacion} ";
        txt += pari.Status ? "Estatus: Activo" : "Estatus: Suspendido";

        if (resultado.Exito)
        {
            ShowNotification(ElMsn("Ok", "Actualizo",
                $"Se actualizo la informacion del parentesco {pari.Parentesco} ", 0));
            txt = $"{TBita}, Se actualizo la informacion del parentesco {pari.Parentesco} " + txt;

            Z190_Bitacora bitaT = new(ElUser.UserId, txt, ElUser.OrgId);
            BitacoraMas(bitaT);
            await BitacoraWrite();
        }
        else
        {
            string etxt = $"Error No Se actualizo el tipo {pari.Parentesco} de nombre: {ElNombre.Completo} ";

            foreach (var e in resultado.MsnError)
            { etxt += $", {e}"; }

            ShowNotification(ElMsn("Error", "Error", etxt, 4000));
            txt = $"{TBita}, No se actualizo un registro de parentesco" + txt + ", ";
            txt += etxt;
            Z192_Logs logTemp = new(ElUser.UserId, txt, false);
            await LogAll(logTemp);
        }
    }

    async Task SaveRow(Z309_Pariente pari)
    {
        await ParientesGrid!.UpdateRow(pari);
    }

    void CancelEdit(Z309_Pariente pari)
    {
        if (pari == pariToInsert) pariToInsert = null!;

        Editando = !Editando;
        ParientesGrid!.CancelEditRow(pari);
    }

    async Task InsertRow()
    {
        pariToInsert = new() { Estado = 3 };
        Editando = !Editando;
        await ParientesGrid!.InsertRow(pariToInsert);
    }

    async void OnCreateRow(Z309_Pariente pari)
    {
        ShowNotification(ElMsn("Info", "Estamos trabajando!", "Dame un minuto para realizar estos cambios!", -2000));
        if (pari == pariToInsert) pariToInsert = null!;

        Editando = !Editando;
        pari.Estado = 1;
        ApiRespuesta<Z309_Pariente> resultado = await Servicio(ServiciosTipos.Insert, pari);

        string txt = $"Nombre: {ElNombre.Completo} con ";

        txt += LosNombresAll.Any(x => x.NombreId == pari.NombreId) ?
                LosNombresAll.FirstOrDefault(z => z.NombreId == pari.ParienteId)!.Completo : " ";

        txt += $"Observaciones: {pari.Observacion} ";
        txt += pari.Status ? "Estatus: Activo" : "Estatus: Suspendido";

        if (resultado.Exito)
        {
            ShowNotification(ElMsn("Exito", "Nuevo dato de parentesco",
                $"Se creo un nuevo dato de parentesco {pari.Parentesco} ", 0));

            txt = $"{TBita}, Se actualizo la informacion del parentesco {pari.Parentesco} " + txt;
            Z190_Bitacora bitaT = new(ElUser.UserId, $"{TBita}, {txt}", ElUser.OrgId);
            BitacoraMas(bitaT);
            await BitacoraWrite();
        }
        else
        {
            string etxt = $"Error NO se agrego un nuevo dato parentesco {pari.Parentesco} nombre: {ElNombre.Completo} ";
            foreach (var e in resultado.MsnError)
            { etxt += $", {e}"; }

            ShowNotification(ElMsn("Error", "Error", etxt, 0));
            txt = $"{TBita}, No se creo un nuevo tipo de dato " + txt + ", ";
            txt += etxt;
            Z192_Logs logTemp = new(ElUser.UserId, txt, true);
            await LogAll(logTemp);
        }
    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }
}
