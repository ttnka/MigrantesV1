
@inherits ServiciosListBase
@inject NotificationService NS
@using TorneosV2.Modelos
@using static TorneosV2.Modelos.MyFunc;


@if (LosServicios != null)
{
    <RadzenDataGrid @ref="ServiciosGrid"
                    AllowFiltering="true" AllowPaging="true" PageSize="50"
                    AllowSorting="true" AllowColumnResize="true"
                    ExpandMode="DataGridExpandMode.Single" AllowGrouping="false"
                    EditMode="DataGridEditMode.Single" AllowColumnPicking="true"
                    Data="@LosServicios" TItem="Z380_Servicios"
                    RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" EmptyText="No hay registros">

        <HeaderTemplate>
            @if (ElUser.Nivel > 4)
            {
                <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                              ButtonStyle="ButtonStyle.Success" Click="InsertRow">
                    Nuevo Servicio
                </RadzenButton>
            }
            <RadzenButton Icon="refresh" style="margin-bottom: 10px"
                          ButtonStyle="ButtonStyle.Info" Click="DetReadServicios">
                Actualizar
            </RadzenButton>
        </HeaderTemplate>

        <!-- AQUI EMPIEZA REPORTE-->

        <Columns>
            <RadzenDataGridColumn TItem="Z380_Servicios" Title="Id"
                                  Filterable="false" Width="70px">
                <Template Context="datos">
                    @(LosServicios.IndexOf(datos) + 1)
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z380_Servicios" Title="Clave" Filterable="true"
                                  Width="125px" Property="Clave">
                <Template Context="datos">
                    @datos.Clave

                </Template>
                <EditTemplate Context="datos">
                    @if(datos.Estado == 3)
                    { 
                        <RadzenTextBox Name="Clave" @bind-Value="datos.Clave" Style="width: 100%" /> <br />
                        <RadzenLengthValidator Component="Clave" Min="2" Max="20"
                                           Text="La Clave son 2 a 20 caracteres" />
                    }
                        else
                    {
                        <RadzenLabel>@datos.Clave</RadzenLabel>
                    }
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z380_Servicios" Title="Titulo" Property="Titulo"
                                  Filterable="true" Width="200px">
                <Template Context="datos">
                    <RadzenLabel> @datos.Titulo </RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Titulo" @bind-Value="datos.Titulo" Style="width: 90%" /> <br />
                    <RadzenRequiredValidator Component="Titulo" Min="1" Max="50" Text="El titulo es Obligatorio." />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z380_Servicios" Title="Tipo" Property="Tipo"
                                  Filterable="true" Resizable="true" Width="150px">

                <Template Context="datos">
                    <RadzenLabel>
                        @datos.Tipo
                    </RadzenLabel>
                </Template>

                <EditTemplate Context="datos">
                    <RadzenTextBox Name="Tipo" @bind-Value="datos.Tipo" Style="width: 90%" /><br />
                    <RadzenRequiredValidator Component="Tipo" Min="2" Max="25" Text="El tipo es Obligatorio." />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z380_Servicios" Title="Comentarios"
                                  Filterable="true" Width="250px">
                <Template Context="datos">
                    <RadzenLabel> @datos.Observaciones </RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    <RadzenTextArea Name="Observaciones" @bind-Value="datos.Observaciones" Style="width: 90%" /><br />

                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="Z380_Servicios" Title="Organizacion"
                                  Filterable="false" Width="250px">
                <Template Context="datos">
                    <RadzenLabel> @datos.Org.Comercial </RadzenLabel>
                </Template>
                <EditTemplate Context="datos">
                    @if (ElUser.Nivel < 6)
                    {
                        <RadzenLabel>@ElUser.Org.Comercial</RadzenLabel>
                    }
                    else
                    {
                        <RadzenDropDown Name="OrgId" Data=LasOrgs @bind-Value=@datos.OrgId
                                ValueProperty="OrgId" TextProperty="Comercial" AllowClear="false"
                                Style="width: 90%;" />
                    }
                </EditTemplate>
            </RadzenDataGridColumn>

            

            <RadzenDataGridColumn TItem="Z380_Servicios" Context="sampleBlazorModelsSampleOrder"
                                  Filterable="false" Sortable="false" TextAlign="TextAlign.Center"
                                  Width="250px" Title="Estado">
                <Template Context="datos">

                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary"
                                  Class="m-1" Click="@((args) => EditRow(datos))" Visible="@(!Editando)" />

                    @if (datos.Status)
                    {
                        <b>Activo</b>
                    }
                    else
                    {
                        <b>Suspendido</b>
                    }


                </Template>

                <EditTemplate Context="datos">

                    @if (datos.Estado != 3)
                    {
                        <div style="white-space:pre-wrap">
                            Borrar este registro?
                            <RadzenSelectBar @bind-Value=@datos.Status TValue="bool"
                                             Placeholder="Borrar este registro?">
                                <Items>
                                    <RadzenSelectBarItem Text="No" Value="true" />
                                    <RadzenSelectBarItem Text="Si" Value="false" />
                                </Items>
                            </RadzenSelectBar>
                        </div>
                    }

                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success"
                                  Class="m-1" Click="@((args) => SaveRow(datos))" />

                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Danger" Class="m-1"
                                  Click="@((args) => CancelEdit(datos))" />
                </EditTemplate>

            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="spinner">
        servicio
    </div>
}


@code {
    Z380_Servicios servToInsert = new() { Estado = 3 };

    void Cancelar()
    {
        servToInsert = new() { Estado = 3 };
    }

    async Task EditRow(Z380_Servicios serv)
    {
        await ServiciosGrid!.EditRow(serv);
        Editando = !Editando;
    }

    async void OnUpdateRow(Z380_Servicios serv)
    {
        if (serv == servToInsert) servToInsert = null!;
        ShowNotification(ElMsn("Info", "Estamos trabajando!", "Dame un minuto para realizar estos cambios!", -2000));
        Editando = !Editando;
        ApiRespuesta<Z380_Servicios> resultado = await Servicio(ServiciosTipos.Update, serv);

        string txt = $"Clave: {serv.Clave}, Tipo: {serv.Tipo}";
        txt += $"Observaciones: {serv.Observaciones}, organizacion: {serv.Org.ComercialRfc},";
        txt += serv.Status ? "Estatus: Activo" : "Estatus: Suspendido";
        if (resultado.Exito)
        {
            ShowNotification(ElMsn("info", "Actualizo",
                $"Se actualizo la informacion del servicio {serv.Titulo}", 0));
            txt = $"{TBita}, Se actualizo la info del servicio {serv.Titulo} " + txt;

            Z190_Bitacora bitaT = new(ElUser.UserId, txt, ElUser.OrgId);
            BitacoraMas(bitaT);
            await BitacoraWrite();
        }
        else
        {
            string etxt = $"Error No Se actualizo la info del servicio {serv.Titulo}";
            foreach (var e in resultado.MsnError)
            { etxt += $", {e}"; }

            ShowNotification(ElMsn("Error", "Error", etxt, 4000));
            txt = $"{TBita}, No se actualizo un registro de servicio" + txt + ", ";
            txt += etxt;
            Z192_Logs logTemp = new(ElUser.UserId, txt, false);
            await LogAll(logTemp);
        }
        await ServiciosGrid!.Reload();
    }

    async Task SaveRow(Z380_Servicios serv)
    {
        await ServiciosGrid!.UpdateRow(serv);
    }

    void CancelEdit(Z380_Servicios serv)
    {
        if (serv == servToInsert) servToInsert = null!;

        Editando = !Editando;
        ServiciosGrid!.CancelEditRow(serv);
    }

    async Task InsertRow()
    {
        servToInsert = new() { Estado = 3 };

        Editando = !Editando;
        await ServiciosGrid!.InsertRow(servToInsert);

    }

    async void OnCreateRow(Z380_Servicios serv)
    {
        if (serv == servToInsert) servToInsert = null!;
        ShowNotification(ElMsn("Info", "Estamos trabajando!", "Dame un minuto para realizar estos cambios!", -2000));
        var o = ElUser.Nivel < 6 || !LasOrgs.Any(x=>x.OrgId == serv.OrgId) ? ElUser.Org :
        LasOrgs.FirstOrDefault(x => x.OrgId == serv.OrgId);

        serv.OrgAdd(o!);
        Editando = !Editando;
        serv.Estado = 1;
        ApiRespuesta<Z380_Servicios> resultado = await Servicio(ServiciosTipos.Insert, serv);

        string txt = $"Clave: {serv.Clave}, Tipo: {serv.Tipo}";
        txt += $"Observaciones: {serv.Observaciones}, organizacion: {serv.Org.ComercialRfc},";
        txt += serv.Status ? "Estatus: Activo" : "Estatus: Suspendido";

        if (resultado.Exito)
        {
            ShowNotification(ElMsn("Exito", "Nuevo servicio",
                $"Se creo un nuevo registro de servicios {serv.Titulo}", 0));

            txt = $"{TBita}, Se agrego un servicio {serv.Titulo} " + txt;
            Z190_Bitacora bitaT = new(ElUser.UserId, $"{TBita}, {txt}", ElUser.OrgId);
            BitacoraMas(bitaT);
            await BitacoraWrite();
        }
        else
        {
            string etxt = $"Error NO se creo el nuevo registro de servicio {serv.Titulo}    ";
            foreach (var e in resultado.MsnError)
            { etxt += $", {e}"; }

            ShowNotification(ElMsn("Error", "Error", etxt, 0));
            txt = $"{TBita}, No se creo un nuevo servicio " + txt + ", ";
            txt += etxt;
            Z192_Logs logTemp = new(ElUser.UserId, txt, true);
            await LogAll(logTemp);
        }

    }

    public void ShowNotification(NotificationMessage message)
    {
        NS.Notify(message);
    }
}

